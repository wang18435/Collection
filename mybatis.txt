Spring整合SpringMVC（负责处理浏览器发来的请求，业务逻辑层处理业务逻辑，根据需求调用持久层实现持久化操作）和Mybatis
主要内容
Mybatis分页插件
Mybatis的逆向工程
Mybatis的缓存
Mybatis简介
Mybatis框架搭建
Mybatis基础和功能（1.Mybatis的核心配置文件的讲解与编写
2.Mybatis的映射文件的讲解和编写
3.Mybatis实现增删改查
4.Mybatis获取参数值的两种方式
5.Mybatis的自定义映射resultMap
6.Mybatis的动态SQL）
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mybatis封装的JDBC（与JDBC功能相同）

Mybatis特性
1.Mybatis是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架
2.Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集
3.Mybatis可以使用简单的xml或注释用于配置和原始映射，将接口和java的POJO映射成数据库中的记录
4.是一个半自动化的ORM框架

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
比较
JDBC
    SQL夹杂在java代码中耦合度较高，导致编码内伤
    维护不易且实际开发需求中SQL有变化，频繁修改的情况多见
    代码冗长，开发效率低
Hibernate和JPA
    操作简单，开发效率高
    程序中的长难复杂SQL需要绕过框架
    内部自动生产的SQL，不容易做特殊优化
    基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难
    反射操作太多，导致数据库性能下降
Mybatis
    轻量级，性能出色
    SQL和java编码分开，功能边界清晰。java代码专注业务、SQL语句专注数据
    开发效率稍逊于Hibernate，但是完全能接受
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
搭建Mybatis
1.开发环境
IDE：ide 2019.2
构建工具：maven 3.5.4
MySQL版本：MySql5.7
MyBatis 3.5.7

2.创建maven工程
a>打包方式
b>引入依赖
 <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.7</version>
        </dependency>
    </dependencies>
3.创建Mybatis的核心配置文件
习惯上命名为mybatis-config.xml,这个文件名仅仅是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以操作时可以复制，粘贴

核心配置文件主要用于配置连接数据库的环境以及Mybatis的全局配置信息

核心配置文件存储在src/main.resources目录下


<?xml version="1.0" encoding="UTF-8" ?>
<!--mybatis配置文件的约束，Spring的约束为xsd文件，而mybatis的约束为dtd文件，注意：功能一样-->
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--必定是！DOCTYPE 后面的单词-->
<configuration>
    <!--配置连接数据库的环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <!--数据库连接池-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value=""/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <mapper resource="org/mybatis/example/BlogMapper.xml"></mapper>
    </mappers>
</configuration>


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.创建mapper接口
想当于dao接口，仅仅是接口，不需要实现（面向将接口编程）
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.创建mybatis的映射文件
ORM（Object Relationship Mapping）对象关系映射
    对象：java的实体类对象
    关系：关系型数据库
    映射：二者之间的对应关系
    java概念             数据库概念
    类                   表
    属性                 字段、列
    对象                 记录、行


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tyut.mapper.UserMapper">
    <insert id="insertUser">
        insert into t_user values(null,'admin','123456',23,'男','123456@qq.com')
    </insert>
</mapper>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.通过junit测试功能
        InputStream is=Resources.getResourceAsStream("mybatis-config.xml");
        //获取SQLSessionFactoryBuilder
        SqlSessionFactoryBuilder sqlSessionFactoryBuilder=new SqlSessionFactoryBuilder();

        //获取sqlsessionFactory
        SqlSessionFactory sqlSessionFactory=sqlSessionFactoryBuilder.build(is);
        //获取sqlSession
        SqlSession sqlSession=sqlSessionFactory.openSession();
        //获取mapper接口对象
        UserMapper mapper=sqlSession.getMapper(UserMapper.class);

        int result=mapper.insertUser();

        //提交事务
        sqlSession.commit();
        System.out.println(result);
    }

自动提交事务方法
在opensession（）中设置true，默认不自动提交事务


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.加入log4j日志功能
<!--日志的配置文件-->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
    <appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
        <param name="Encoding" value="UTF-8"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%-5p %d{MM-dd HH:mm:ss,SSS} %m
              (%F:%L) \n"/>
        </layout>
    </appender>
    <!--当前日志级别-->
    <logger name="java.sql">
        <level value="debug"></level>
    </logger>
    <!--mybatis中的日志-->
    <logger name="org.apache.ibatis">
        <level value="info"></level>
    </logger>
    <!--FATAL（致命）>ERROR>WARN>INFO>DEBUG 从左到右打印的内容越来越详细-->
    <root>
        <level value="debug"></level>
        <appender-ref ref="STDOUT"/>
    </root>
</log4j:configuration>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
略微小结
映射需要满足的两个一致

映射文件的namespace要和mapper接口的全类名保持一致
映射文件中SQL语句的id要和mapper接口中的方法名保持一致

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mybatis中各种查询功能
1.查询一个实体类
2.查询一个list集合
3.查询单个数据
4.查询一条数据为map集合
5.查询多条数据为map集合

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
核心配置文件
核心配置文件必须按照固定的顺序：
properties,settings?typeAliases?typeHandler?objectFactory?objectWrapperFactory?releactorFactory?plugings?environments?databaseldProvider?mappers
enviroments是复数标签，每一个enviroment中都是一个连接数据库的环境
enviroments中的default表示默认使用的环境
enviroment
<!--id：表示连接数据库环境的唯一标识-->
transactionManager：用来设置事务管理设置方式
    type 有两种，JDBC，当前环境时执行SQL时，使用的是JDBC中原生的事务管理方式（提交，回滚需要手动处理）
    MANAGED：表示被管理（例如Spring）
dataSource
    type：设置数据源的类型
        POOLED、UNPOOLED、JNDI
        1.使用数据库连接池缓存数据库连接
        2.不是用数据库连接池
        3.使用上下文中的数据源

properties 引入properties文件
typeAliases设置别名
alias可以不设置，不设置为默认别名，若不设置该属性，且不区分大小写
    <typeAliases >
        <typeAlias type="com.tyut.pojo.User" alias="User"></typeAlias>
    </typeAliases>
    package，以包为单位设置默认的别名

mappers  引入映射文件
以包为单位引入映射文件要和映射文件的所在的包一致
mapper接口和映射文件的名字一致
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

mybatis获取参数值得两种方式
${}和#{}
${}的本质是字符串拼接（单引号问题），#{}的本质是占位符赋值

1.单个字面量类型的参数
${}的本质是字符串拼接（单引号问题），#{}的本质是占位符赋值

2. 多个字面量类型的参数
自动把参数放在map集合内
以arg为键，参数为值，或者以param为键，参数为值
3.参数为Map类型
4.参数为对象
5.@param
以参数注解的键为键，参数为值

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mybatis各种查询功能
1.查询一个实体类对象
可以通过实体类对象接受（也可以用List接受），若有多条，一定不能通过实体类对象接受，会抛异常

2.查询一个list集合
通过List接受

3.查询单个数据
Integer中被mybatis默认设置类型别名

4.查询一条数据为map集合

5.查询多条数据为map集合

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
特殊的SQL执行
1. mybatis的模糊查询

2.批量删除
使用${}
#{}会自动加''

3.动态设置表名
select * from ${}
只能使用${}，#{}会添加‘’

4.添加功能获取自增的主键
将主键传送在传递的实体类的某个属性上

<insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
    insert into t_user values(null,#{username},#{password},#{age},#{sex},#{email})
</insert>

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
字段名和属性名不一致
自定义映射resultMap
1.为字段起别名，保持和属性名的一致
2.全局配置
    <settings>
        <!--将下划线自动映射为驼峰-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
3.通过级联属性解决多对一的关系
1.级联属性赋值
 <select id="getEmpAndDept" resultMap="getEmpAndDeptmap">
        select * from t_emp left join t_dept on t_emp.did=t_dept.did where t_emp.eid=#{eid}
    </select>
    <resultMap id="getEmpAndDeptmap" type="emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <result property="dept.id" column="did"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>
2.通过association
    <select id="getEmpAndDept" resultMap="getEmpAndDeptmap">
        select * from t_emp left join t_dept on t_emp.did=t_dept.did where t_emp.eid=#{eid}
    </select>
    <resultMap id="getEmpAndDeptmap" type="emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <association property="dept" javaType="Dept">
            <id property="id" column="did"></id>
            <result property="deptName" column="dept_name"></result>
        </association>
    </resultMap>
3.通过分布查询解决多对一的映射关系
    <select id="getEmp1" resultMap="getEmpAndDeptmap">
        select * from t_emp where eid=#{eid}
    </select>
    <resultMap id="getEmpAndDeptmap" type="emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <association property="dept"
                     select="com.tyut.mapper.DeptMapper.getEmpAndDept"
                     column="did">
        </association>
    </resultMap>
好处：可以实现延迟加载（懒加载），只访问员工就只加载员工信息，需要部门信息就加在部门信息
4.延迟加载
    <settings>
        <!--将下划线自动映射为驼峰-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--开启延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
    </settings>
获取某个字段只会加载那个语句

效果：
DEBUG 06-12 13:11:45,596 ==>  Preparing: select * from t_emp where eid=?               (BaseJdbcLogger.java:137) 
DEBUG 06-12 13:11:45,621 ==> Parameters: 1(Integer)               (BaseJdbcLogger.java:137) 
DEBUG 06-12 13:11:45,684 <==      Total: 1               (BaseJdbcLogger.java:137) 
zhangsan
++++++++++++++++++++++++++++++++++++++++++++++++++++
DEBUG 06-12 13:11:45,684 ==>  Preparing: select did id,dept_name from t_dept where did=?               (BaseJdbcLogger.java:137) 
DEBUG 06-12 13:11:45,685 ==> Parameters: 1(Integer)               (BaseJdbcLogger.java:137) 
DEBUG 06-12 13:11:45,687 <==      Total: 1               (BaseJdbcLogger.java:137) 
Dept{id=1, deptName='a部'}

<association fetchType=""></association>设置这个可以实现该部分的延迟加载
值为eager和lazy
_________________________________________________________________________________________________________________________________________________
多对一，对象，一对多，集合
_________________________________________________________________________________________________________________________________________________
一对多的问题
1.使用collection标签
    <select id="getDeptAndEmp" resultMap="x1">
        select * from t_dept left join t_emp on t_dept.did=t_emp.did where t_dept.did=#{did}
    </select>
    <resultMap id="x1" type="dept">
        <id property="id" column="did"></id>
        <result property="deptName" column="dept_name"></result>
        <collection property="empList" ofType="emp">
            <id property="eid" column="eid"></id>
            <result property="empName" column="emp_name"></result>
            <result property="age" column="age"></result>
            <result property="sex" column="sex"></result>
            <result property="email" column="email"></result>
        </collection>
    </resultMap>
2.分布查询
略，类似于多对一，只是使用的是collection标签

--------------------------------------------------------------------------------------------------------------------------------------------------
动态SQL