版本控制工具应该具有的功能
1.协同修改
多人并行不悖的修改
2.数据备份
不仅记录当前，还能够保存每一个提交过的历史状态
3.版本管理
SVN采用的是增量式管理，（拼接，需要的时候连起来得到）而Git才用的是文件系统快照
4.权限控制
对团队中参与开发的人员进行权限控制。
对团队外开发者贡献的代码进行审核-git独有
5.历史记录
查看修改人，修改时间，修改内容，日志信息
将本地文件恢复到某一个历史状态
6.分支管理
允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率

对于git的出现，由于跟linux有关，附上几句linus的话
My name is Linus Torvalds and I am your god.
If you still don’t like it, that’s OK: that’s why I’m boss. I simply know better than you do.
Talk is cheap. Show me the code.
I’m always right. This time I’m just even more right than usual.
Those that can, do. Those that can’t, complain.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
集中式版本控制工具具有单点故障的问题
git分布式版本系统
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git优势
1.大部分操作在本地完成，不需要联网（分布式）
2.完整性保证（哈希操作）每一个操作都有一个哈希值
3.尽可能添加数据而不是删除或修改数据
4.分支操作非常快捷流畅（以快照的方式管理，分支不同的指针）
5.与linux命令全面兼容
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git安装
建议使用vim编辑器
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git结构
工作区：写代码的地方 git add提交到下一步
暂存区：打算提交的东西，还未提交，可以提交到本地库，可以提交，可以撤回（临时存储）  -git commit提交到下一步
本地库：（历史版本）
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git和github（代码托管中心）
局域网环境下
   GitLab服务器
外网环境下
   Github 
   码云
代码托管中心的任务：维护远程库
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
本地库和远程库（团队内和团队外）
创建本地库，建立远程库
通过push可以将本地库推送到远程库，另一个人可以通过git clone初始化本地库，可以push到远程，但得加入远程库，创建人又可以通过pull拉取修改
远程库fork，复制其他人的远程库
团队外
发起拉取的请求pull request,需要进行审核，让偶可以进行在线merge
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
本地库操作
git init
    效果：创建了.git(隐藏目录)
    注意：存放的是本地库相关的子目录或者文件
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
设置签名
形式
    用户名：tom
    Email地址：xxxxx@xxx.com
    作用：区分不同开发人员
    辨析：这里设置的签名和远程库的账号密码没有任何关系
    命令git config user.name tom_pro
        git config user.email xxxxx_pro@xxx.com
        git config --global user.name tom
        git config --global user.email xxxxx@xxx.com
        项目级别/仓库级别：尽在当前本地库范围内生效
        系统用户级别：登录当前操作系的用户范围
        没有设置项目，就使用了用户级别（优先级，项目>用户）
        二者都不存在不允许进行操作
    信息保存在.git中的config
    global保存在当前用户(Windows/用户/xx)的.gitconfig
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
添加以及查看操作状态
No commit yet 本地库没有东西
noting to commit 暂存区没有可提交的

git status
git add
git commit file(进入到vim编辑器模式)
git commit -a 以跟踪文件直接跳囧
git commit -m "" 注释提交
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git log   查看历史记录 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
查看历史记录的几种不同方式
git log --pretty=oneline   （以漂亮的格式展示历史，一行）
git log --oneline           (哈希值显示一部分，作者和日期消失）
git log --graph         (基于图表显示)
git log --abbrev-commit      (与直接--oneline相似，仅是缩短哈希值，作者和日期，注释可以看到)
git reflog     （可以看到HEAD@{1}，作者和日期小时，仅可以看到最前的HEAD@{}，以及缩短的哈希值，和注释）
 出现HEAD@{1}，Head指针到这个版本需要移动1步

 多屏控制方式：
 空格 向下翻页
 b   向上翻页
 q   退出
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 前进后退历史版本操作的本质
 
 指针HEAD，方便引用
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 基于索引值前进后退指针
 1.基于索引值操作
 git reset --hard xxxx(缩短的哈希值或者整长哈希值)
 2.使用^符号
 3.使用~符号
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 其他的版本前进后退方式
 ^(数量的多少代表回退几个版本)
 git reset --hard HEAD ^^

~
git reset --hard~n
后退n步
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
reset命令参数对比
    --soft
    不会碰暂存区，不会碰工作区，只是移动HEAD指针（暂存区显示Changes to be committed，仅仅是因为本地库发生改变）
    --mixed
    在本地库移动HEAD指针
    重置暂存区
    --hard
    在本地库移动HEAD指针
    重置暂存区
    重置工作区
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
永久删除文件找回
git reset --hard HEAD^ (上一结操作)，版本回退
    解释：文件已经删除，但历史不会删除
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
添加到暂存区的删除文件找回
意思是将某个文件交到本地库，修改了工作区，这时候暂存区和本地库保持一致，只有工作区修改了，可以直接回退版本库
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
个人理解，working tree指当前见到的工作目录所处状态，即工作区。
index 表示所有被git跟踪的索引。另一方面也可指暂存区
stage 是指暂存区
HEAD指向当前分支的最新的commit指针

git reset HEAD file  从版本库中恢复暂存区     应与4同理
git checkout -- file 从版本库中恢复工作区    应与3同理
git restore file 从版本库中恢复file到工作区中
git restore --staged file   暂存区恢复到版本库
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
比较文件
get diff  不加参数，就是在于暂存区进行比较
git diff HEAD file   与本地库进行比较
git diff HEAD^ file 与历史版本进行比较
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
分支概述
分支：在版本控制过程中，使用多条线同时推进多个任务。
分支的好处：
同时并行推进多个功能开发，提高开发效率
如果各个分支在开发过程中，如果一个分支开发失败，不会对其他分支有影响。失败的分支删除重新开始即可。
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
分支操作
git branch    查看分支
git branch xxx   创建xxx分支
git checkout xxx  切换分支
合并分支
    站在接受修改的分支上
    执行merge命令               git merge xxx  合并xxx分支到当前分支上
    如果发生冲突，手动合并
<<<<<<< HEAD
apple                    当前分支内容
a
=======
xxx
>>>>>>> hot_fix
另一分支内容
git add           解决冲突
git commit        结束冲突合并中的状态

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Git基本原理
哈希
    明文-》加密算法-》密文
特点
1.不管输入的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。
2.哈希算法确定，输入数据确定，输出数据能保证不变
3.哈希算法确定。输入数据有变，输出数据一定有变化，而且通常变化很大
4.哈希算法不可逆
MD5
Git底层采用的是SHA-1算法
进行校验文件
服务端的文件进行哈希算法，客户端的文件也进行哈希算法，进行比较，如果不同，则文件损坏
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Git保存版本的机制
集中式git的保存版本的机制
    只记录每次版本的修改，需要时进行拼接即可得到原文件（不保存重复的数据）
git的文件管理机制
    快照流（重复的文件指针指向）
    98ca9                ---->92ec2          ---->几个文件
    commit size        tree size
    tree 92ec2         blob 5b1d3
    author Scott       blob xxxx
    committer Scott    ......
例如比特币交易，所有的交易两两哈希，每一个哈希，归并为最后的一个哈希（区块）每个区块进行保存上一个的哈希
各版本通过父节点形成链关系
大致上是
   哈希值
commit size
tree xxx
parent  xxx（如果为最后一个，则父节点为空）
author
committer

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
git管理分支原理
创建分支就是创建新的指针
HEAD指向master，master指向节点
切换分支，移动HEAD指针
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
创建远程库地址别名
git remote 查看远程库
git remote add name xxxx(连接)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
推送操作
git push name（连接） xxx（想要推送的分支）
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
克隆操作
git clone xxx(连接)
把远程库克隆到本地，把远程库下载到本地，初始化操作，自动连接远程库（别名origin）
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
只需要输入一次密码，因为Windows凭据，删除之后就会重新要求登陆
邀请其他组员加入到团队
仓库中点击setting->collaborators
被邀请人登录账号输入连接之后加入
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
远程库修改的拉取
pull实际上是两个操作，分别是fetch和merge
git fetch origin master
git merge origin/master
分步可以看完之后合并
git pull name（连接） xxx（想要合并的远程分支）
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
团队协作中的冲突解决
    先进行pull操作，然后手动合并，提交后进行push，否则push就会失败
