目前的技术存在的问题
    （1）一个项目就是一个工程
        如多项目庞大，不适合用package划分模块，最好每一个模块对应一个工程
    借助Maven将一个项目拆分成多个功能
    （2）项目中的jar包必须手动“复制”“粘贴”到WEB/INF/lib目录下
        同样的jar文件重复出现在不同的项目工程中，浪费空间且工程臃肿
        借用Maven把jar包保存在“仓库”中
    （3）jar包需要准备好，或到官网下载
        通过Maven提供下载
    （4）一个jar包依赖的其他jar包需要手动加入到项目中
        spring-core依赖commons-logging
        spring-context spring-aop  aopliance ....
----------------------------------------------------------------------------------------------------------------------------------------------------------------------——
Maven构建的概念
    Maven服务于java的自动构建工具（自身也是使用Java写的）
编译
    编译
    部署
    搭建
        编译：编译为字节码
        部署：BS项目最终运行的并不是动态web工程本身，而是动态工程编译的过程
        动态web工程编译结果才能执行
    运行时环境：其实是一组jar包的引用，并没有把jar复制到工程中，所以并不是目录
构建过程：
（1）清理：将以前编译得到的旧的字节码文件删除，为下一次编译做准备
（2）编译：将java源文件编译成class文件
（3）测试：自动测试
（4）报告：测试程序执行的结果
（5）打包：动态Web工程打wa包，java工程大jar包r
（6）安装：Maven特定概念，将打包的得到的文件复制到仓库中的指定位置
（7）部署：将动态Web工程生成的war包复制在Servley容器的指定目录下，使其可以运行
自动化构建：
----------------------------------------------------------------------------------------------------------------------------------------------------------------------——
安装Maven核心程序
    （1）检查java_home环境变量
    （2）解压Maven核心程序的压缩包
mvn -v 查看配置是否成功
----------------------------------------------------------------------------------------------------------------------------------------------------------------------——
Maven约定的目录结构
    约定的目录结构*
    Hello
    |---src
    |---|---main
    |---|---|---java
    |---|---|---resource
    |---|---test
    |---|---|---java
    |---|---|---resource
    |---pom.xml

    (1)根目录
    （2）src 源码
    （3）pom.xml Maven 工程的核心配置文件
    （4）main 存放主程序
    （5）test 存放测试程序
    （6）java Java源文件
    （7）resource 存放框架配置文件或其他工具的配置文件
    为什么遵守约定的目录结构
    
    pom*
    坐标*
    依赖**
    仓库
    生命周期/插件/目标
    继承
    聚合